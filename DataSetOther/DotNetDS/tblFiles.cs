//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace DotNetDS {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DirData : DataSet {
        
        private tblFilesDataTable tabletblFiles;
        
        public DirData() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DirData(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["tblFiles"] != null)) {
                    this.Tables.Add(new tblFilesDataTable(ds.Tables["tblFiles"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tblFilesDataTable tblFiles {
            get {
                return this.tabletblFiles;
            }
        }
        
        public override DataSet Clone() {
            DirData cln = ((DirData)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["tblFiles"] != null)) {
                this.Tables.Add(new tblFilesDataTable(ds.Tables["tblFiles"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tabletblFiles = ((tblFilesDataTable)(this.Tables["tblFiles"]));
            if ((this.tabletblFiles != null)) {
                this.tabletblFiles.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DirData";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DirData.xsd";
            this.Locale = new System.Globalization.CultureInfo("el-GR");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tabletblFiles = new tblFilesDataTable();
            this.Tables.Add(this.tabletblFiles);
        }
        
        private bool ShouldSerializetblFiles() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void tblFilesRowChangeEventHandler(object sender, tblFilesRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tblFilesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnDescription;
            
            private DataColumn columnfDate;
            
            private DataColumn columnFileID;
            
            private DataColumn columnfSize;
            
            private DataColumn columnLongFileName;
            
            private DataColumn columnPathID;
            
            private DataColumn columnzipID;
            
            internal tblFilesDataTable() : 
                    base("tblFiles") {
                this.InitClass();
            }
            
            internal tblFilesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn fDateColumn {
                get {
                    return this.columnfDate;
                }
            }
            
            internal DataColumn FileIDColumn {
                get {
                    return this.columnFileID;
                }
            }
            
            internal DataColumn fSizeColumn {
                get {
                    return this.columnfSize;
                }
            }
            
            internal DataColumn LongFileNameColumn {
                get {
                    return this.columnLongFileName;
                }
            }
            
            internal DataColumn PathIDColumn {
                get {
                    return this.columnPathID;
                }
            }
            
            internal DataColumn zipIDColumn {
                get {
                    return this.columnzipID;
                }
            }
            
            public tblFilesRow this[int index] {
                get {
                    return ((tblFilesRow)(this.Rows[index]));
                }
            }
            
            public event tblFilesRowChangeEventHandler tblFilesRowChanged;
            
            public event tblFilesRowChangeEventHandler tblFilesRowChanging;
            
            public event tblFilesRowChangeEventHandler tblFilesRowDeleted;
            
            public event tblFilesRowChangeEventHandler tblFilesRowDeleting;
            
            public void AddtblFilesRow(tblFilesRow row) {
                this.Rows.Add(row);
            }
            
            public tblFilesRow AddtblFilesRow(string Description, System.DateTime fDate, int FileID, int fSize, string LongFileName, int PathID, int zipID) {
                tblFilesRow rowtblFilesRow = ((tblFilesRow)(this.NewRow()));
                rowtblFilesRow.ItemArray = new object[] {
                        Description,
                        fDate,
                        FileID,
                        fSize,
                        LongFileName,
                        PathID,
                        zipID};
                this.Rows.Add(rowtblFilesRow);
                return rowtblFilesRow;
            }
            
            public tblFilesRow FindByFileID(int FileID) {
                return ((tblFilesRow)(this.Rows.Find(new object[] {
                            FileID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                tblFilesDataTable cln = ((tblFilesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new tblFilesDataTable();
            }
            
            internal void InitVars() {
                this.columnDescription = this.Columns["Description"];
                this.columnfDate = this.Columns["fDate"];
                this.columnFileID = this.Columns["FileID"];
                this.columnfSize = this.Columns["fSize"];
                this.columnLongFileName = this.Columns["LongFileName"];
                this.columnPathID = this.Columns["PathID"];
                this.columnzipID = this.Columns["zipID"];
            }
            
            private void InitClass() {
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnfDate = new DataColumn("fDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfDate);
                this.columnFileID = new DataColumn("FileID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFileID);
                this.columnfSize = new DataColumn("fSize", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfSize);
                this.columnLongFileName = new DataColumn("LongFileName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLongFileName);
                this.columnPathID = new DataColumn("PathID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPathID);
                this.columnzipID = new DataColumn("zipID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnzipID);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnFileID}, true));
                this.columnFileID.AllowDBNull = false;
                this.columnFileID.Unique = true;
            }
            
            public tblFilesRow NewtblFilesRow() {
                return ((tblFilesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new tblFilesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(tblFilesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tblFilesRowChanged != null)) {
                    this.tblFilesRowChanged(this, new tblFilesRowChangeEvent(((tblFilesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tblFilesRowChanging != null)) {
                    this.tblFilesRowChanging(this, new tblFilesRowChangeEvent(((tblFilesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tblFilesRowDeleted != null)) {
                    this.tblFilesRowDeleted(this, new tblFilesRowChangeEvent(((tblFilesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tblFilesRowDeleting != null)) {
                    this.tblFilesRowDeleting(this, new tblFilesRowChangeEvent(((tblFilesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovetblFilesRow(tblFilesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tblFilesRow : DataRow {
            
            private tblFilesDataTable tabletblFiles;
            
            internal tblFilesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabletblFiles = ((tblFilesDataTable)(this.Table));
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tabletblFiles.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblFiles.DescriptionColumn] = value;
                }
            }
            
            public System.DateTime fDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tabletblFiles.fDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblFiles.fDateColumn] = value;
                }
            }
            
            public int FileID {
                get {
                    return ((int)(this[this.tabletblFiles.FileIDColumn]));
                }
                set {
                    this[this.tabletblFiles.FileIDColumn] = value;
                }
            }
            
            public int fSize {
                get {
                    try {
                        return ((int)(this[this.tabletblFiles.fSizeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblFiles.fSizeColumn] = value;
                }
            }
            
            public string LongFileName {
                get {
                    try {
                        return ((string)(this[this.tabletblFiles.LongFileNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblFiles.LongFileNameColumn] = value;
                }
            }
            
            public int PathID {
                get {
                    try {
                        return ((int)(this[this.tabletblFiles.PathIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblFiles.PathIDColumn] = value;
                }
            }
            
            public int zipID {
                get {
                    try {
                        return ((int)(this[this.tabletblFiles.zipIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblFiles.zipIDColumn] = value;
                }
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tabletblFiles.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tabletblFiles.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsfDateNull() {
                return this.IsNull(this.tabletblFiles.fDateColumn);
            }
            
            public void SetfDateNull() {
                this[this.tabletblFiles.fDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsfSizeNull() {
                return this.IsNull(this.tabletblFiles.fSizeColumn);
            }
            
            public void SetfSizeNull() {
                this[this.tabletblFiles.fSizeColumn] = System.Convert.DBNull;
            }
            
            public bool IsLongFileNameNull() {
                return this.IsNull(this.tabletblFiles.LongFileNameColumn);
            }
            
            public void SetLongFileNameNull() {
                this[this.tabletblFiles.LongFileNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPathIDNull() {
                return this.IsNull(this.tabletblFiles.PathIDColumn);
            }
            
            public void SetPathIDNull() {
                this[this.tabletblFiles.PathIDColumn] = System.Convert.DBNull;
            }
            
            public bool IszipIDNull() {
                return this.IsNull(this.tabletblFiles.zipIDColumn);
            }
            
            public void SetzipIDNull() {
                this[this.tabletblFiles.zipIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tblFilesRowChangeEvent : EventArgs {
            
            private tblFilesRow eventRow;
            
            private DataRowAction eventAction;
            
            public tblFilesRowChangeEvent(tblFilesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public tblFilesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
